# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

# trigger:
# - main

stages:
  - stage: BuildDev
    pool:
      vmImage: 'ubuntu-latest'
      displayName: "Building-Dev"
    
    jobs:
      - job: Building
        steps:
          - task: UsePythonVersion@0
            displayName: "Use python version 3.8"
            inputs:
              versionSpec: '3.8'
          
          - task: CmdLine@2
            displayName: Upgrafe PIP tool
            inputs:
              script: python -m pip install --upgrade pip
          
          - task: CmdLine@2
            displayName: "Install Requiremnents"
            inputs:
              script: |
                cd backend
                pip install -r requirements.txt
          
          - task: CmdLine@2
            displayName: Generating Reports
            inputs:
              script: |
                cd backend
                pip install pytest pytest-azurepipelines
                pip install pytest-cov
                python -m pytest -v -c pytest.ini --cov-config=.coveragerc --junitxml=results.xml --cov=. --cov-report=xml --cov-report=html
          # https://learn.microsoft.com/en-us/azure/devops/pipelines/ecosystems/customize-python?view=azure-devops#test
          - task: PublishTestResults@2
            condition: succeededOrFailed()
            inputs:
              testResultsFiles: '**/test-*.xml'
              testRunTitle: 'Publish test results for Python $(python.version)'

          - task: PublishCodeCoverageResults@1
            displayName: Publish code coverage files.
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
              reportDirectory: "$(System.DefaultWorkingDirectory)/htmlcov"

          - task: DockerInstaller@0
            inputs:
              dockerVersion: '17.09.0-ce'
          - task: Docker@2
            displayName: Build an image
            inputs:
              containerRegistry: 'sj-cloud-registry' # Name of the service connection to your container registry
              repository: 'mydockerrepo/myimage' # Name of your Docker repository
              command: 'buildAndPush' # The Docker command to execute (e.g., 'buildAndPush', 'build', 'push', 'run')
              Dockerfile: '**/Dockerfile' # Path to your Dockerfile
              tags: '$(Build.BuildId)' # Tags for the Docker image
          
          - task: AzureWebAppContainer@1
            inputs:
              azureSubscription: 'Free Trial(44740981-b69b-4527-a3e9-fd65a5fe212b)'
              appName: 'sj-api-deployment'
              deployToSlotOrASE: true
              resourceGroupName: 'rg-learning-cloud'
              slotName: 'production'
              containers: 'sjcloudcontainerregistry.azurecr.io/mydockerrepo/myimage:$(Build.BuildId)'